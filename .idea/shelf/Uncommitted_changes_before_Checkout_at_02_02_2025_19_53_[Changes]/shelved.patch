Index: variant.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import Flask, render_template, session, request, redirect\r\n\r\nimport db_functions\r\nimport db_functions as db\r\nfrom os import urandom\r\nimport sqlite3\r\nimport random\r\n\r\napp = Flask(__name__)\r\napp.config['SECRET_KEY'] = urandom(16)\r\n\r\ndef auth(route):\r\n    def inner(*args, **kwargs):\r\n        if 'email' in session:\r\n            return route(*args, **kwargs)\r\n        else:\r\n            return redirect('/sign-in/')\r\n    return inner\r\n\r\n\r\n@app.route('/')\r\ndef index():\r\n    user = 'email' in session\r\n    return render_template('main.html', user=user)\r\n\r\n\r\n\r\n@app.route('/sign-up/', methods=['GET', 'POST'])\r\ndef sign_up():\r\n    if request.method == 'GET':\r\n        return render_template('sign-up.html')\r\n    data = dict(request.form)\r\n    data['country'] = 'Russia! GOYDA!'\r\n    data['about'] = None\r\n    data['path'] = None\r\n    db.add_user(data)\r\n    session['email'] = data['email']\r\n    return redirect('/dashboard/')\r\n\r\n\r\n@app.route('/sign-in/', methods=['GET', 'POST'])\r\ndef sign_in():\r\n    if request.method == 'GET':\r\n        return render_template('sign-in.html')\r\n    data = dict(request.form)\r\n    uid = db.get_user_id(data['email'], 1)\r\n    user = db.get_user(uid, 1)\r\n    # orms were invented in 1995... People before 1995:\r\n    if user and user[0][6] == data['password']:\r\n        session['email'] = data['email']\r\n        return redirect('/dashboard/')\r\n    else:\r\n        return render_template('sign-in.html', error='Неверные данные!')\r\n\r\n@app.route('/dashboard/')\r\ndef dashboard():\r\n    if 'email' not in session:\r\n        return redirect('/sign-in/')\r\n    uid = db.get_user_id(session['email'], 1)\r\n    user = db.get_user(uid, 1)\r\n    if not user:\r\n        return redirect('/sign-in/')\r\n\r\n    labels = [str(i) for i in range(1, 28)]\r\n    correct = [i for i in range(10, 38)]\r\n    incorrect = [c for c in correct]\r\n    # orms were invented in 1995... People before 1995:\r\n    [_, name, surname, patronymic, email, \r\n     age, _, country, _, about, phone, path, *_] = user[0]\r\n    return render_template('dashboard.html', \r\n                           name=f'{surname} {name} {patronymic}', \r\n                           email=email, \r\n                           age=age,\r\n                           country=country,\r\n                           image_path=path,\r\n                           color='Цвета в нашем сервисе пока не поддерживаются, приносим свои извнинения. За Россию!',\r\n                           telephone=phone,\r\n                           labels=labels,\r\n                           correct=correct,\r\n                           incorrect=incorrect,\r\n                           user=True\r\n                           )\r\n\r\n\r\n\r\n@app.route('/logout/')\r\ndef logout():\r\n    if 'email' in session:\r\n        del session['email']\r\n    return redirect('/')\r\n\r\n\r\n@app.route('/text-lesson/<course_id>')\r\ndef text_lesson(course_id):\r\n    if 'email' not in session:\r\n        return redirect('/sign-in/')\r\n    uid = db.get_user_id(session['email'], 1)\r\n    user = db.get_user(uid, 1)\r\n    if not user:\r\n        return redirect('/sign-in/')\r\n\r\n    html = open(f'Samples_For_Courses/{course_id}.html', 'r', encoding='utf8').read()\r\n    return render_template(\r\n        'text-lesson.html', \r\n        course_name=db_functions.get_course(course_id)[0][1],\r\n        materials=html,\r\n        id = course_id,\r\n        user=True)\r\n\r\n@app.route('/video-lesson/<course_id>')\r\ndef video_lesson(course_id):\r\n    if 'email' not in session:\r\n        return redirect('/sign-in/')\r\n    uid = db.get_user_id(session['email'], 1)\r\n    user = db.get_user(uid, 1)\r\n    if not user:\r\n        return redirect('/sign-in/')\r\n\r\n    url = open(f'Samples_For_Courses/{course_id}_url.txt', 'r', encoding='utf8').read()\r\n    return render_template(\r\n        'video-lesson.html',\r\n        course_name=db_functions.get_course(course_id)[0][1],\r\n        video_url=url,\r\n        id = course_id,\r\n        user=True)\r\n\r\n@app.route('/courses')\r\ndef courses():\r\n    if 'email' not in session:\r\n        return redirect('/sign-in/')\r\n    uid = db.get_user_id(session['email'], 1)\r\n    user = db.get_user(uid, 1)\r\n    if not user:\r\n        return redirect('/sign-in/')\r\n    return render_template('courses.html', user=True)\r\n\r\n@app.route('/task-lesson/<course_id>/<int:num>')\r\ndef task_lesson(course_id, num):\r\n    if 'email' not in session:\r\n        return redirect('/sign-in/')\r\n    uid = db.get_user_id(session['email'], 1)\r\n    user = db.get_user(uid, 1)\r\n    if not user:\r\n        return redirect('/sign-in/')\r\n\r\n    tasks = db_functions.get_tasks_for_course(course_id)\r\n    print(tasks)\r\n    return render_template(\r\n        'test.html',\r\n        course_name=db_functions.get_course(course_id)[0][1],\r\n        task=tasks[num - 1],\r\n        id=course_id,\r\n        task_num=num,\r\n        user=True)\r\n\r\n@app.route(\"/add-task\", methods=['POST', 'GET'])\r\ndef add_task():\r\n    if 'email' not in session:\r\n        return redirect('/sign-in/')\r\n    uid = db.get_user_id(session['email'], 1)\r\n    user = db.get_user(uid, 1)\r\n\r\n    if not user:\r\n        return redirect('/sign-in/')\r\n    if request.method == 'GET':\r\n        return render_template(\"add-task.html\", user=True)\r\n    elif request.method == 'POST':\r\n        print(request.form)\r\n        db_functions.add_task(request.form)\r\n        return redirect(\"/\")\r\n\r\n\r\n@app.route('/tasks/')\r\ndef tasks():\r\n    if 'email' not in session:\r\n        return redirect('/sign-in/')\r\n    uid = db.get_user_id(session['email'], 1)\r\n    user = db.get_user(uid, 1)\r\n    if not user:\r\n        return redirect('/sign-in/')\r\n\r\n    tasks = db.get_all_tasks(1)\r\n    tasks = [(i[0], i[1], i[3], i[4], i[5], i[2]) for i in tasks]\r\n    '''\r\n    task = [\r\n        1,         # task id\r\n        \"text\",    # task statement\r\n        5,         # difficulty\r\n        1,         # number\r\n        'Kompege', # source\r\n        1488       # answer\r\n        ]\r\n    '''\r\n    return render_template('task_page.html', tasks=tasks, user=True)\r\n\r\n\r\n@app.route('/variant/')\r\ndef variant():\r\n    if 'email' not in session:\r\n        return redirect('/sign-in/')\r\n    uid = db.get_user_id(session['email'], 1)\r\n    user = db.get_user(uid, 1)\r\n    if not user:\r\n        return redirect('/sign-in/')\r\n\r\n    tasks = db.get_all_tasks(1)\r\n    tasks = [(i[0], i[1], i[3], i[4], i[5], i[2]) for i in tasks]\r\n    random.shuffle(tasks)\r\n    tasks = tasks[:20]\r\n    tasks.sort(key=lambda x: x[3])\r\n    \r\n    return render_template('variant.html', user=True, tasks=tasks)\r\n\r\n\r\n@app.route('/submit-task', methods=[\"POST\"])\r\ndef submit_task(): \r\n    # print(session)\r\n    if 'email' not in session:\r\n        return redirect('/sign-in/')\r\n    uid = db.get_user_id(session['email'], 1)\r\n    user = db.get_user(uid, 1)\r\n    print(uid, user)\r\n    if not user:\r\n        return redirect('/sign-in/')\r\n    \r\n    # orms were invented in 1995... People before 1995:\r\n    [user_id, *_] = user[0]\r\n    data = request.json\r\n    task_id = data['task_id']\r\n    answer  = data['ans'].strip()\r\n    correct_answer = db.get_task(task_id, 1)[0][2].strip()\r\n\r\n    # For now trying to not change db_functions, so move this later\r\n    conn = sqlite3.connect(\"MAIN_BD.db\")\r\n    conn.cursor().execute(\r\n            '''insert into Attempts \r\n               (ID_task, ID_user, answer, is_correct, date, ID_course)\r\n               values (?, ?, ?, ?, NULL, NULL)''',\r\n            (task_id, user_id, answer, answer == correct_answer)).fetchall()\r\n    conn.commit()\r\n    conn.close()\r\n\r\n    return data\r\n\r\n@app.route(\"/group/<int:group_id>\")\r\ndef group(group_id):\r\n    # if 'email' not in session:\r\n    #     return redirect('/sign-in/')\r\n    # uid = db.get_user_id(session['email'], 1)\r\n    students = db_functions.get_students_for_group(group_id)\r\n    teachers = db_functions.get_teachers_for_group(group_id)\r\n    # group_name = db.get_group(group_id)[0][1] Оно теоретически работает, просто в db нет групп еще\r\n    group_name = \"Группа усиленной подготовки по Латеху\"\r\n    done_options = [\"Вариант 1\", \"Вариант 2\", \"Вариант 3\", \"Вариант 4\"]\r\n    und_options = [\"Вариант 5\", \"Вариант 13\"]\r\n    return render_template('group.html', teachers=teachers, users=students, ADMIN=0,\r\n                           group_name=group_name, course_id=group_id,\r\n                           done_options=done_options, und_options=und_options)\r\n    # role = db_functions.get_user_role(uid, 1)\r\n    # if role == 'teacher':\r\n    #     options = db_functions.get_options_for_group(group_id)\r\n    #     return render_template(\"\", )\r\n    # else:\r\n    #     done_options = db_functions.get_options_for_user_in_group(uid, group_id)\r\n    #     not_done_options= db_functions.get_options_for_user_in_group_not_done(uid, group_id)\r\n    #     for i in range(len(done_options)):\r\n    #         done_options[i].append(db_functions.get_results_for_option_user(done_options[i][0], uid))\r\n    #     return render_template(\"\", )\r\n\r\n\r\n@app.route(\"/my-groups\", methods=['POST', 'GET'])\r\ndef my_groups():\r\n    if 'email' not in session:\r\n        return redirect('/sign-in/')\r\n    uid = db.get_user_id(session['email'], 1)\r\n    user = db.get_user(uid, 1)\r\n\r\n    if not user:\r\n        return redirect('/sign-in/')\r\n    if request.method == 'GET':\r\n        groups = [[[1,1],[2,3],[4,6],[1,6],[\"-\",1]],[[1,1],[2,3],[4,6],[1,6],[\"-\",1]],[[1,1],[2,3],[4,6],[1,6],[\"-\",1]]]\r\n        return render_template(\"groups.html\", groups = groups, user=True)\r\n    elif request.method == 'POST':\r\n        print(request.form)\r\n        db_functions.add_task(request.form)\r\n        return redirect(\"/\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    app.run(host='0.0.0.0', port=8080)\r\n\r\n
===================================================================
diff --git a/variant.py b/variant.py
--- a/variant.py	(revision d3eab138a8485afccd4da12fafb52a638edb31af)
+++ b/variant.py	(date 1738515050962)
@@ -146,7 +146,7 @@
     tasks = db_functions.get_tasks_for_course(course_id)
     print(tasks)
     return render_template(
-        'test.html',
+        'task-lesson.html',
         course_name=db_functions.get_course(course_id)[0][1],
         task=tasks[num - 1],
         id=course_id,
